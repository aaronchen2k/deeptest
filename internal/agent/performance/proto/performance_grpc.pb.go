// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: internal/agent/performance/proto/performance.proto

package ptproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerformanceServiceClient is the client API for PerformanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerformanceServiceClient interface {
	RunnerExecStart(ctx context.Context, opts ...grpc.CallOption) (PerformanceService_RunnerExecStartClient, error)
	RunnerExecStop(ctx context.Context, opts ...grpc.CallOption) (PerformanceService_RunnerExecStopClient, error)
	RunnerIsBusy(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	ConductorGetGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	ConductorAddGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	ConductorClearGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	ConductorClearAllGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type performanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceServiceClient(cc grpc.ClientConnInterface) PerformanceServiceClient {
	return &performanceServiceClient{cc}
}

func (c *performanceServiceClient) RunnerExecStart(ctx context.Context, opts ...grpc.CallOption) (PerformanceService_RunnerExecStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerformanceService_ServiceDesc.Streams[0], "/ptproto.PerformanceService/RunnerExecStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &performanceServiceRunnerExecStartClient{stream}
	return x, nil
}

type PerformanceService_RunnerExecStartClient interface {
	Send(*PerformanceExecStartReq) error
	Recv() (*PerformanceExecResp, error)
	grpc.ClientStream
}

type performanceServiceRunnerExecStartClient struct {
	grpc.ClientStream
}

func (x *performanceServiceRunnerExecStartClient) Send(m *PerformanceExecStartReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *performanceServiceRunnerExecStartClient) Recv() (*PerformanceExecResp, error) {
	m := new(PerformanceExecResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *performanceServiceClient) RunnerExecStop(ctx context.Context, opts ...grpc.CallOption) (PerformanceService_RunnerExecStopClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerformanceService_ServiceDesc.Streams[1], "/ptproto.PerformanceService/RunnerExecStop", opts...)
	if err != nil {
		return nil, err
	}
	x := &performanceServiceRunnerExecStopClient{stream}
	return x, nil
}

type PerformanceService_RunnerExecStopClient interface {
	Send(*PerformanceExecStopReq) error
	Recv() (*PerformanceExecResp, error)
	grpc.ClientStream
}

type performanceServiceRunnerExecStopClient struct {
	grpc.ClientStream
}

func (x *performanceServiceRunnerExecStopClient) Send(m *PerformanceExecStopReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *performanceServiceRunnerExecStopClient) Recv() (*PerformanceExecResp, error) {
	m := new(PerformanceExecResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *performanceServiceClient) RunnerIsBusy(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ptproto.PerformanceService/RunnerIsBusy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) ConductorGetGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/ptproto.PerformanceService/ConductorGetGlobalVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) ConductorAddGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/ptproto.PerformanceService/ConductorAddGlobalVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) ConductorClearGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ptproto.PerformanceService/ConductorClearGlobalVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) ConductorClearAllGlobalVar(ctx context.Context, in *GlobalVarRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ptproto.PerformanceService/ConductorClearAllGlobalVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceServiceServer is the server API for PerformanceService service.
// All implementations should embed UnimplementedPerformanceServiceServer
// for forward compatibility
type PerformanceServiceServer interface {
	RunnerExecStart(PerformanceService_RunnerExecStartServer) error
	RunnerExecStop(PerformanceService_RunnerExecStopServer) error
	RunnerIsBusy(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	ConductorGetGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.Int32Value, error)
	ConductorAddGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.Int32Value, error)
	ConductorClearGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.BoolValue, error)
	ConductorClearAllGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.BoolValue, error)
}

// UnimplementedPerformanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPerformanceServiceServer struct {
}

func (UnimplementedPerformanceServiceServer) RunnerExecStart(PerformanceService_RunnerExecStartServer) error {
	return status.Errorf(codes.Unimplemented, "method RunnerExecStart not implemented")
}
func (UnimplementedPerformanceServiceServer) RunnerExecStop(PerformanceService_RunnerExecStopServer) error {
	return status.Errorf(codes.Unimplemented, "method RunnerExecStop not implemented")
}
func (UnimplementedPerformanceServiceServer) RunnerIsBusy(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerIsBusy not implemented")
}
func (UnimplementedPerformanceServiceServer) ConductorGetGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConductorGetGlobalVar not implemented")
}
func (UnimplementedPerformanceServiceServer) ConductorAddGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConductorAddGlobalVar not implemented")
}
func (UnimplementedPerformanceServiceServer) ConductorClearGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConductorClearGlobalVar not implemented")
}
func (UnimplementedPerformanceServiceServer) ConductorClearAllGlobalVar(context.Context, *GlobalVarRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConductorClearAllGlobalVar not implemented")
}

// UnsafePerformanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceServiceServer will
// result in compilation errors.
type UnsafePerformanceServiceServer interface {
	mustEmbedUnimplementedPerformanceServiceServer()
}

func RegisterPerformanceServiceServer(s grpc.ServiceRegistrar, srv PerformanceServiceServer) {
	s.RegisterService(&PerformanceService_ServiceDesc, srv)
}

func _PerformanceService_RunnerExecStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PerformanceServiceServer).RunnerExecStart(&performanceServiceRunnerExecStartServer{stream})
}

type PerformanceService_RunnerExecStartServer interface {
	Send(*PerformanceExecResp) error
	Recv() (*PerformanceExecStartReq, error)
	grpc.ServerStream
}

type performanceServiceRunnerExecStartServer struct {
	grpc.ServerStream
}

func (x *performanceServiceRunnerExecStartServer) Send(m *PerformanceExecResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *performanceServiceRunnerExecStartServer) Recv() (*PerformanceExecStartReq, error) {
	m := new(PerformanceExecStartReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PerformanceService_RunnerExecStop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PerformanceServiceServer).RunnerExecStop(&performanceServiceRunnerExecStopServer{stream})
}

type PerformanceService_RunnerExecStopServer interface {
	Send(*PerformanceExecResp) error
	Recv() (*PerformanceExecStopReq, error)
	grpc.ServerStream
}

type performanceServiceRunnerExecStopServer struct {
	grpc.ServerStream
}

func (x *performanceServiceRunnerExecStopServer) Send(m *PerformanceExecResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *performanceServiceRunnerExecStopServer) Recv() (*PerformanceExecStopReq, error) {
	m := new(PerformanceExecStopReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PerformanceService_RunnerIsBusy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).RunnerIsBusy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.PerformanceService/RunnerIsBusy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).RunnerIsBusy(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_ConductorGetGlobalVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).ConductorGetGlobalVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.PerformanceService/ConductorGetGlobalVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).ConductorGetGlobalVar(ctx, req.(*GlobalVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_ConductorAddGlobalVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).ConductorAddGlobalVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.PerformanceService/ConductorAddGlobalVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).ConductorAddGlobalVar(ctx, req.(*GlobalVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_ConductorClearGlobalVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).ConductorClearGlobalVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.PerformanceService/ConductorClearGlobalVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).ConductorClearGlobalVar(ctx, req.(*GlobalVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_ConductorClearAllGlobalVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).ConductorClearAllGlobalVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.PerformanceService/ConductorClearAllGlobalVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).ConductorClearAllGlobalVar(ctx, req.(*GlobalVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceService_ServiceDesc is the grpc.ServiceDesc for PerformanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptproto.PerformanceService",
	HandlerType: (*PerformanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunnerIsBusy",
			Handler:    _PerformanceService_RunnerIsBusy_Handler,
		},
		{
			MethodName: "ConductorGetGlobalVar",
			Handler:    _PerformanceService_ConductorGetGlobalVar_Handler,
		},
		{
			MethodName: "ConductorAddGlobalVar",
			Handler:    _PerformanceService_ConductorAddGlobalVar_Handler,
		},
		{
			MethodName: "ConductorClearGlobalVar",
			Handler:    _PerformanceService_ConductorClearGlobalVar_Handler,
		},
		{
			MethodName: "ConductorClearAllGlobalVar",
			Handler:    _PerformanceService_ConductorClearAllGlobalVar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunnerExecStart",
			Handler:       _PerformanceService_RunnerExecStart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunnerExecStop",
			Handler:       _PerformanceService_RunnerExecStop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/agent/performance/proto/performance.proto",
}
